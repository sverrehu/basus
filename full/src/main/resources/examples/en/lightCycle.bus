KEY_UP = 38;
KEY_DOWN = 40;
KEY_LEFT = 37;
KEY_RIGHT = 39;

GRID_PIXELS = 10;
GRID_WIDTH = width() / GRID_PIXELS;
GRID_HEIGHT = height() / GRID_PIXELS;

r[0] = 0;
g[0] = 0;
b[0] = 0;
r[1] = 255;
g[1] = 0;
b[1] = 255;
r[2] = 0;
g[2] = 255;
b[2] = 255;
r[3] = 255;
g[3] = 255;
b[3] = 0;

function clearBoard()
    for x = 1 to GRID_WIDTH do
        for y = 1 to GRID_HEIGHT do
            pos[x, y] = 0;
        done;
    done;
    for x = 1 to GRID_WIDTH do
        pos[x, 1] = 3;
        pos[x, GRID_HEIGHT] = 3;
    done;
    for y = 1 to GRID_HEIGHT do
        pos[1, y] = 3;
        pos[GRID_WIDTH, y] = 3;
    done;
endfunc;

function drawBoard()
    for x = 1 to GRID_WIDTH do
        for y = 1 to GRID_HEIGHT do
            local colIdx = pos[x, y];
            color(r[colIdx], g[colIdx], b[colIdx]);
            fillRect((x - 1) * GRID_PIXELS, (y - 1) * GRID_PIXELS,
                     GRID_PIXELS, GRID_PIXELS);
        done;
    done;
endfunc;

function setBoardPos(x, y, what)
    pos[x, y] = what;
endfunc;

function isTaken(x, y)
    return pos[x, y] != 0;
endfunc;

function explode(x, y)
    color(255, 0, 0);
    for radius = 1 to 30 step 3 do
        fillCircle(x, y, radius);
        flush();
        wait(20);
    done;
    for radius = 30 to 0 step -3 do
        color(0, 0, 0);
        fillCircle(x, y, radius + 3);
        color(255, 0, 0);
        fillCircle(x, y, radius);
        flush();
        wait(20);
    done;
endfunc;

function potentiallyChangeRobotDirection()
    if isTaken(x[2] + dx[2], y[2] + dy[2]) or random(10) == 0 then
        local d = 1;
        if random(1, 2) == 1 then
            local d = -1;
        endif;
        if not isTaken(x[2] + d, y[2]) then
            dx[2] = d;
            dy[2] = 0;
        elseif not isTaken(x[2] - d, y[2]) then
            dx[2] = -d;
            dy[2] = 0;
        elseif not isTaken(x[2], y[2] + d) then
            dx[2] = 0;
            dy[2] = d;
        elseif not isTaken(x[2], y[2] - d) then
            dx[2] = 0;
            dy[2] = -d;
        endif;
    endif;
endfunc;

function potentiallyChangePlayerDirection()
    if keyPressed(KEY_UP) then
        dx[1] = 0;
        dy[1] = 1;
    elseif keyPressed(KEY_DOWN) then
        dx[1] = 0;
        dy[1] = -1;
    elseif keyPressed(KEY_LEFT) then
        dx[1] = -1;
        dy[1] = 0;
    elseif keyPressed(KEY_RIGHT) then
        dx[1] = 1;
        dy[1] = 0;
    endif;
endfunc;

function playRound()
    x[1] = GRID_WIDTH / 3;
    y[1] = GRID_HEIGHT / 2;
    x[2] = x[1] + GRID_WIDTH / 3;
    y[2] = GRID_HEIGHT / 2;
    crash[1] = FALSE;
    crash[2] = FALSE;
    for q = 1 to 2 do
        dx[q] = 0;
        dy[q] = 0;
        local r = random(1, 4);
        if r == 1 then
            dx[q] = 1;
        elseif r == 2 then
            dx[q] = -1;
        elseif r == 3 then
            dy[q] = 1;
        else
            dy[q] = -1;
        endif;
    done;

    clearBoard();
    terminate = FALSE;
    while not terminate do
        t = time();
        potentiallyChangePlayerDirection();
        potentiallyChangeRobotDirection();
        for q = 1 to 2 do
            x[q] = x[q] + dx[q];
            y[q] = y[q] + dy[q];
            if isTaken(x[q], y[q]) then
                crash[q] = TRUE;
            endif;
            setBoardPos(x[q], y[q], q);
        done;
        drawBoard();
        flush();
        if crash[1] or crash[2] then
            terminate = TRUE;
            if crash[1] and crash[2] then
                message = "There's a draw";
                local x = x[1];
                local y = y[1];
            elseif crash[1] then
                message = "You loose!";
                local x = x[1];
                local y = y[1];
            else
                message = "You win!";
                local x = x[2];
                local y = y[2];
            endif;
            flush();
            explode((x - 1) * GRID_PIXELS + GRID_PIXELS / 2,
                    (y - 1) * GRID_PIXELS + GRID_PIXELS / 2);
            color(255, 255, 255);
            println(message);
            flush();
        endif;
        wait(100 - (time() - t));
    done;
endfunc;

autoFlush(FALSE);
playRound();
